{"ast":null,"code":"var _jsxFileName = \"/Users/thesugar/news-sharing/components/Account.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n  constructor(props) {\n    console.log('Account.jsのconstructor');\n    super(props);\n\n    _defineProperty(this, \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    this.login_check = this.login_check.bind(this);\n  }\n\n  login() {\n    console.log('Account.jsのlogin()');\n    let provider = new firebase.auth.GoogleAuthProvider();\n    let self = this;\n    let db = firebase.firestore();\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    firebase.auth().signInWithPopup(provider).then((result, db) => {\n      db.collection(\"news-user\").where('email', '==', result.user.email).then(docs => {\n        // success\n        console.log(doc.data());\n        this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            username: result.user.displayName,\n            email: result.user.email,\n            articles: this.props.articles\n          }\n        });\n      }).catch(error => {\n        console.log('error');\n      });\n      this.props.onLogined();\n    });\n  }\n\n  logout() {\n    console.log(\"logout\");\n    firebase.auth().signOut();\n    this.props.dispatch({\n      type: 'UPDATE_USER',\n      value: {\n        login: false,\n        username: '(click here!)',\n        email: '',\n        articles: this.props.articles\n      }\n    });\n    this.props.onLogouted();\n  } // check if user is logged in or logged out\n\n\n  login_check() {\n    console.log('Account.jsのlogin_check()');\n\n    if (this.props.login === undefined || this.props.login == false) {\n      this.login();\n    } else {\n      this.logout();\n    }\n  }\n\n  render() {\n    console.log('Account.jsのrender()');\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        // User is signed in.\n        this.username_ = user.displayName;\n      } else {// No user is signed in.\n      }\n    });\n    return __jsx(\"p\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"acount\",\n      onClick: this.login_check,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"LOGINED: \", this.props.username));\n  }\n\n}\n\nAccount = connect(state => state)(Account);\nexport default Account;","map":{"version":3,"sources":["/Users/thesugar/news-sharing/components/Account.js"],"names":["React","Component","connect","firebase","Account","constructor","props","console","log","fontSize","padding","login_check","bind","login","provider","auth","GoogleAuthProvider","self","db","firestore","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","then","result","collection","where","user","email","docs","doc","data","dispatch","type","value","username","displayName","articles","catch","error","onLogined","logout","signOut","onLogouted","undefined","render","onAuthStateChanged","username_","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        console.log('Account.jsのconstructor')\n        super(props);\n        this.login_check = this.login_check.bind(this);\n    }\n\n    login(){\n        console.log('Account.jsのlogin()')\n        let provider = new firebase.auth.GoogleAuthProvider();\n        let self = this;\n        let db = firebase.firestore();\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n        firebase.auth().signInWithPopup(provider)\n        .then((result, db) => {\n\n            db.collection(\"news-user\")\n            .where('email', '==', result.user.email).then((docs) => {\n                // success\n                console.log(doc.data())\n                this.props.dispatch({\n                    type: 'UPDATE_USER',\n                    value: {\n                        login: true,\n                        username: result.user.displayName,\n                        email: result.user.email,\n                        articles : this.props.articles\n                    }\n                });\n            }).catch(error => {\n                console.log('error');\n            })\n            this.props.onLogined();\n        });\n    }\n\n    logout(){\n        console.log(\"logout\");\n        firebase.auth().signOut();\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: false,\n                username: '(click here!)',\n                email: '',\n                articles: this.props.articles\n            }\n        });\n        this.props.onLogouted();\n    }\n\n    // check if user is logged in or logged out\n    login_check(){\n        console.log('Account.jsのlogin_check()');\n        if (this.props.login === undefined || this.props.login == false){\n            this.login();\n        } else {\n            this.logout();\n        }\n    }\n\n    render(){\n        console.log('Account.jsのrender()');\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n              // User is signed in.\n              this.username_ = user.displayName;\n            } else {\n              // No user is signed in.\n            }\n          });\n\n        return (\n            <p className=\"login\">\n                <span className=\"acount\"\n                onClick={this.login_check}>\n                    LOGINED: {this.props.username}\n                </span>\n            </p>\n        );\n    }\n}\n\nAccount = connect((state) => state)(Account);\nexport default Account;"]},"metadata":{},"sourceType":"module"}