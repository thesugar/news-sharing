{"ast":null,"code":"var _jsxFileName = \"/Users/thesugar/news-sharing/components/Account.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n  constructor(props) {\n    console.log('Account.jsのconstructor');\n    super(props);\n\n    _defineProperty(this, \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    _defineProperty(this, \"match_user\", result => {\n      let db = firebase.firestore(); // メールアドレスをもとに、マッチするユーザーを探してユーザーIDを取得\n      // 下のブロックの中でもresult.userは生きてるので他の認証情報とかを取ってくることもできる\n\n      db.collection(\"news-user\").where('email', '==', result.user.email).get().then(querySnapshot => {\n        // success\n        console.log(querySnapshot.docs[0].data());\n        this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            userid: querySnapshot.docs[0].data().userid,\n            articles: this.props.articles\n          }\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    this.login_check = this.login_check.bind(this);\n    this.match_user = this.match_user.bind(this);\n  }\n\n  login() {\n    console.log('Account.jsのlogin()');\n    let provider = new firebase.auth.GoogleAuthProvider();\n    let self = this;\n    let db = firebase.firestore();\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    firebase.auth().signInWithPopup(provider).then(result => {\n      this.match_user(result);\n      this.props.onLogined();\n    });\n  }\n\n  logout() {\n    console.log(\"logout\");\n    firebase.auth().signOut();\n    this.props.dispatch({\n      type: 'UPDATE_USER',\n      value: {\n        login: false,\n        username: '(click here!)',\n        email: '',\n        articles: this.props.articles\n      }\n    });\n    this.props.onLogouted();\n  } // check if user is logged in or logged out\n\n\n  login_check() {\n    console.log('Account.jsのlogin_check()');\n\n    if (this.props.login === undefined || this.props.login == false) {\n      this.login();\n    } else {\n      this.logout();\n    }\n  }\n\n  render() {\n    console.log('Account.jsのrender()');\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        // User is signed in.\n        this.username_ = user.displayName;\n      } else {// No user is signed in.\n      }\n    });\n    return __jsx(\"p\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"acount\",\n      onClick: this.login_check,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"LOGINED: \", this.props.username));\n  }\n\n}\n\nAccount = connect(state => state)(Account);\nexport default Account;","map":{"version":3,"sources":["/Users/thesugar/news-sharing/components/Account.js"],"names":["React","Component","connect","firebase","Account","constructor","props","console","log","fontSize","padding","result","db","firestore","collection","where","user","email","get","then","querySnapshot","docs","data","dispatch","type","value","login","userid","articles","catch","error","login_check","bind","match_user","provider","auth","GoogleAuthProvider","self","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","onLogined","logout","signOut","username","onLogouted","undefined","render","onAuthStateChanged","username_","displayName","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        console.log('Account.jsのconstructor')\n        super(props);\n        this.login_check = this.login_check.bind(this);\n        this.match_user = this.match_user.bind(this);\n    }\n\n    match_user = (result) => {\n    \n        let db = firebase.firestore();\n        // メールアドレスをもとに、マッチするユーザーを探してユーザーIDを取得\n        // 下のブロックの中でもresult.userは生きてるので他の認証情報とかを取ってくることもできる\n        db.collection(\"news-user\")\n        .where('email', '==', result.user.email).get().then((querySnapshot) => {\n            // success\n            console.log(querySnapshot.docs[0].data());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: true,\n                    userid : querySnapshot.docs[0].data().userid,\n                    articles : this.props.articles\n                }\n            });\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    login(){\n        console.log('Account.jsのlogin()')\n        let provider = new firebase.auth.GoogleAuthProvider();\n        let self = this;\n        let db = firebase.firestore();\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n        firebase.auth().signInWithPopup(provider)\n        .then((result) => {\n            this.match_user(result);\n            this.props.onLogined();\n        });\n    }\n\n    logout(){\n        console.log(\"logout\");\n        firebase.auth().signOut();\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: false,\n                username: '(click here!)',\n                email: '',\n                articles: this.props.articles\n            }\n        });\n        this.props.onLogouted();\n    }\n\n    // check if user is logged in or logged out\n    login_check(){\n        console.log('Account.jsのlogin_check()');\n        if (this.props.login === undefined || this.props.login == false){\n            this.login();\n        } else {\n            this.logout();\n        }\n    }\n\n    render(){\n        console.log('Account.jsのrender()');\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n              // User is signed in.\n              this.username_ = user.displayName;\n            } else {\n              // No user is signed in.\n            }\n          });\n\n        return (\n            <p className=\"login\">\n                <span className=\"acount\"\n                onClick={this.login_check}>\n                    LOGINED: {this.props.username}\n                </span>\n            </p>\n        );\n    }\n}\n\nAccount = connect((state) => state)(Account);\nexport default Account;"]},"metadata":{},"sourceType":"module"}