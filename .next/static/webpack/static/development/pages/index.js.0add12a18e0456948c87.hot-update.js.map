{"version":3,"file":"static/webpack/static/development/pages/index.js.0add12a18e0456948c87.hot-update.js","sources":["webpack:///./components/Account.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        console.log('Account.jsのconstructor')\n        super(props);\n        this.login_check = this.login_check.bind(this);\n        this.match_user = this.match_user.bind(this);\n    }\n\n    match_user = (result) => {\n    \n        let db = firebase.firestore();\n        // メールアドレスをもとに、マッチするユーザーを探してユーザーIDを取得\n        // 下のブロックの中でもresult.userは生きてるので他の認証情報とかを取ってくることもできる\n        db.collection(\"news-user\")\n        .where('email', '==', result.user.email).get().then((querySnapshot) => {\n            // success\n            console.log(querySnapshot.docs[0].data());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: true,\n                    userid : querySnapshot.docs[0].data().userid,\n                    articles : this.props.articles\n                }\n            });\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    login(){\n        console.log('Account.jsのlogin()')\n        let provider = new firebase.auth.GoogleAuthProvider();\n        let self = this;\n        let db = firebase.firestore();\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n        firebase.auth().signInWithPopup(provider)\n        .then((result) => {\n            this.match_user(result);\n            this.props.onLogined();\n        });\n    }\n\n    logout(){\n        console.log(\"logout\");\n        firebase.auth().signOut();\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: false,\n                username: '(click here!)',\n                email: '',\n                articles: this.props.articles\n            }\n        });\n        this.props.onLogouted();\n    }\n\n    // check if user is logged in or logged out\n    login_check(){\n        console.log('Account.jsのlogin_check()');\n        if (this.props.login === undefined || this.props.login == false){\n            this.login();\n        } else {\n            this.logout();\n        }\n    }\n\n    render(){\n        console.log('Account.jsのrender()');\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n              // User is signed in.\n              this.username_ = user.displayName;\n            } else {\n              // No user is signed in.\n            }\n          });\n\n        return (\n            <p className=\"login\">\n                <span className=\"acount\"\n                onClick={this.login_check}>\n                    LOGINED: {this.props.userid}\n                </span>\n            </p>\n        );\n    }\n}\n\nAccount = connect((state) => state)(Account);\nexport default Account;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAJA;AACA;AAFA;AACA;AAIA;AASA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAzBA;AACA;AAJA;AAKA;AACA;;;AAuBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA5FA;AACA;AA8FA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}