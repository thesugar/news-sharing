{"version":3,"file":"static/webpack/static/development/pages/p/[id].js.c3fe0f7469f945571972.hot-update.js","sources":["webpack:///./components/SelectWho.js"],"sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport SimpleModal from '../components/Modal'\n\nclass SelectWho extends Component {\n\n    constructor(props){\n        super(props);\n        if (this.props.login == false) {\n            Router.push('/');\n        }\n        this.state = {\n            userList : [],\n            textAreaValue : '',\n            message : null\n        }\n\n        this.logined = this.logined.bind(this);\n        this.onChecked = this.onChecked.bind(this);\n        this.doAction = this.doAction.bind(this);\n        this.onChangeText = this.onChangeText.bind(this);\n    }\n\n    // login, logout 処理\n    logined(){\n        console.log('logined.');\n    }\n\n    logouted(){\n        Router.push('/');\n    }\n\n    onChecked(userid, e) {\n        const currentSelectedUsers = this.state.currentSelectedUsers ? this.state.currentSelectedUsers : [];\n        currentSelectedUsers.push(userid)\n        // はまりポイント：\n        // 以下で {currentSelectedUsers : currentSelectedUsers.push(userid)}としたら\n        // currentSelectedUsers に 1 という数字が入って配列じゃないためpushできないという現象\n        // Array.push は 戻り値として length を返すため\n        e.target.checked ? \n        this.setState({currentSelectedUsers : currentSelectedUsers})\n        :\n        this.setState({currentSelectedUsers : currentSelectedUsers.filter(elem => elem !== userid)})\n    }\n\n    getUserList = (self = this) => {\n        console.log('now inside getUserList function');\n        let db = firebase.firestore(); // firestore のオブジェクト取得\n    \n        db.collection('news-user')\n        .get()\n        .then(function(querySnapshot) {\n            let userList = [];\n            querySnapshot.forEach((doc) => {\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.id, \" => \", doc.data());\n            userList.push(<li key={doc.id}><input type=\"checkbox\" onChange={(e) => self.onChecked(doc.data().userid, e)} />{doc.data().userid}</li>);\n            })\n            self.setState({userList: userList});\n        });\n    }\n\n    onChangeText = e => {\n        this.setState({textAreaValue: e.target.value});\n    }\n\n    // データの登録処理\n    doAction = (article, userid, e) => {    \n        console.log('doActionの中');\n        console.log('userid is');\n        console.log(userid);\n        let db = firebase.firestore();\n        // Firestore の登録処理\n\n        if (this.state.currentSelectedUsers.length === 0 || this.state.currentSelectedUsers === null || this.state.currentSelectedUsers === undefined){\n            this.setState({message : '共有する相手を1人以上選択してください'});\n            return null;\n        }\n\n        db.collection('share').add({\n            title: article.title,\n            description: article.description,\n            image: article.urlToImage,\n            url: article.url,\n            sharedFrom: userid,\n            sharedTo : this.state.currentSelectedUsers,\n            comment : this.state.textAreaValue // コメントへの返信を実装するときにはcommentを配列にする（か都度フィールドを追加する？），コメントへのいいねを実装するならネストJSONにする?\n        })\n        .then((doc) => {\n            console.log(`共有しました`);\n            this.setState({message: '共有しました！<br />続けて別の人やグループに共有することもできます。', textAreaValue: ''});\n            setTimeout(() => {this.setState({message: null})}, 2000);\n        })\n        .catch((error) => {\n            console.log(`共有に失敗しました。リトライしてください。`);\n            this.setState({message: '共有に失敗しました。リトライしてください。', textAreaValue: ''});\n            setTimeout(() => {this.setState({message: null})}, 2000);\n        });\n\n        this.setState({\n            title: '',\n            description: '',\n            image: '',\n            url: '',\n            sharedFrom : '',\n            sharedTo : '',\n            comment : ''\n        })\n    }\n\n    render(){\n        const article = this.props.article;\n        const userid = this.props.userid;\n        (this.state.userList.length === 0 || this.state.userList === undefined) && this.getUserList();\n        const userList = this.state.userList;\n        console.log('renderの中でuserListがとれてるか')\n        console.log(userList);\n        return (\n            <div>\n                <ul>{userList}</ul>\n                <div>\n                <textarea value={this.state.textAreaValue} onChange={this.onChangeText} />\n                </div>\n                <button onClick={(e) => this.doAction(article, userid, e)}>確定</button>\n                <p>{this.state.message}</p>\n            </div>\n            // 共有先はここでモーダル（ポータル）を表示して選べるようにする\n        );\n    }\n}\n\nSelectWho = connect((state) => state) (SelectWho);\nexport default SelectWho;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAuCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAvDA;AAyDA;AAAA;AAAA;AACA;AACA;AA3DA;AA8DA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AArGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAdA;AAeA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;;AAmEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;;;;AA5HA;AACA;AA8HA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}