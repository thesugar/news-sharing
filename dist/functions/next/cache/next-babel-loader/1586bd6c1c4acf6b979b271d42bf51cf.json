{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\n\nclass ShareNews extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"doAction\", (article, userid, e) => {\n      console.log('doActionの中');\n      console.log('userid is');\n      console.log(userid);\n      let db = firebase.firestore(); // Firestore の登録処理\n\n      db.collection('share').add({\n        title: article.title,\n        description: article.description,\n        image: article.urlToImage,\n        url: article.url,\n        sharedFrom: userid //sharedTo : \n\n      }).then(doc => {\n        console.log(`共有しました`);\n      }).catch(error => {\n        console.log(`共有に失敗しました。リトライしてください。`);\n      });\n      this.setState({\n        title: '',\n        description: '',\n        image: '',\n        url: ''\n      });\n    });\n\n    if (this.props.login == false) {\n      Router.push('/');\n    }\n\n    this.state = {\n      title: '',\n      description: '',\n      url: '',\n      image: ''\n    };\n    this.logined = this.logined.bind(this);\n    this.doAction = this.doAction.bind(this);\n  } // login, logout 処理\n\n\n  logined() {\n    console.log('logined.');\n  }\n\n  logouted() {\n    Router.push('/');\n  } // データの登録処理\n\n\n  render() {\n    const article = this.props.article;\n    const userid = this.props.userid;\n    return __jsx(\"div\", null, __jsx(\"button\", {\n      onClick: e => this.doAction(article, userid, e)\n    }, \"\\u5171\\u6709\\u3059\\u308B\")) // 共有先はここでモーダル（ポータル）を表示して選べるようにする\n    ;\n  }\n\n}\n\nShareNews = connect(state => state)(ShareNews);\nexport default ShareNews;","map":null,"metadata":{},"sourceType":"module"}