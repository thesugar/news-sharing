{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nvar AddComment = /*#__PURE__*/function (_Component) {\n  _inherits(AddComment, _Component);\n\n  function AddComment(props) {\n    var _this;\n\n    _classCallCheck(this, AddComment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddComment).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeText\", function (e) {\n      _this.setState({\n        textAreaValue: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"doAction\", function (shareId, userid, e) {\n      var db = firebase.firestore();\n      var date = firebase.firestore.Timestamp.fromDate(new Date()); // Firestore の登録処理\n\n      db.collection('share').doc(shareId).set({\n        comment: _defineProperty({}, date.seconds + userid, {\n          speaker: userid,\n          text: _this.state.textAreaValue,\n          date: date\n        })\n      }, {\n        merge: true\n      }).then(function (doc) {\n        console.log(\"\\u30B3\\u30E1\\u30F3\\u30C8\\u3092\\u8FFD\\u52A0\\u3057\\u307E\\u3057\\u305F\");\n\n        _this.setState({\n          message: '返信しました！続けて別の人やグループに共有することもできます。',\n          textAreaValue: ''\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            message: null\n          });\n        }, 2000);\n      })[\"catch\"](function (error) {\n        console.log(\"\\u8FD4\\u4FE1\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\\u3002\\u30EA\\u30C8\\u30E9\\u30A4\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n\n        _this.setState({\n          message: '共有に失敗しました。リトライしてください。',\n          textAreaValue: ''\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sync\", function (shareId) {\n      var db = firebase.firestore();\n      db.collection(\"share\").doc(shareId).onSnapshot(function (doc) {\n        console.log('inside sync func!');\n        console.log(doc.data());\n        var commentRef = doc.data()['comment'];\n        var commentList = [];\n\n        _Object$keys(commentRef).map(function (key) {\n          return commentList.push(__jsx(\"li\", {\n            key: key\n          }, commentRef[key]['speaker'], \": \", commentRef[key]['text'], \" (\", new Date(commentRef[key]['date'].seconds * 1000).toLocaleString(), \")\"));\n        });\n\n        _this.setState({\n          commentList: commentList\n        });\n      });\n    });\n\n    if (_this.props.login == false) {\n      Router.push('/');\n    }\n\n    _this.state = {\n      textAreaValue: '',\n      message: null\n    };\n    _this.logined = _this.logined.bind(_assertThisInitialized(_this));\n    _this.doAction = _this.doAction.bind(_assertThisInitialized(_this));\n    _this.onChangeText = _this.onChangeText.bind(_assertThisInitialized(_this));\n\n    _this.sync(_this.props.shareId);\n\n    return _this;\n  } // login, logout 処理\n\n\n  _createClass(AddComment, [{\n    key: \"logined\",\n    value: function logined() {\n      console.log('logined.');\n    }\n  }, {\n    key: \"logouted\",\n    value: function logouted() {\n      Router.push('/');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var shareId = this.props.shareId;\n      var userid = this.props.userid;\n      return __jsx(\"div\", null, this.state.commentList, __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(AccountCircle, null)), __jsx(Grid, {\n        item: true\n      }, __jsx(TextField, {\n        id: \"outlined-multiline-flexible\",\n        label: \"Reply\",\n        placeholder: \"\\u8FD4\\u4FE1\\u3059\\u308B\",\n        multiline: true,\n        rowsMax: \"5\",\n        size: \"medium\",\n        value: this.state.textAreaValue,\n        onChange: this.onChangeText,\n        variant: \"outlined\"\n      })), __jsx(Grid, {\n        item: true\n      }, __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.doAction(shareId, userid, e);\n        }\n      }, \"\\u8FD4\\u4FE1\")))), __jsx(\"p\", null, this.state.message));\n    }\n  }]);\n\n  return AddComment;\n}(Component);\n\nAddComment = connect(function (state) {\n  return state;\n})(AddComment);\nexport default AddComment;","map":null,"metadata":{},"sourceType":"module"}