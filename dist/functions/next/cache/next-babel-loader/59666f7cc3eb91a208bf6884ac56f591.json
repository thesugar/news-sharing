{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport Typography from '@material-ui/core/Typography';\n\nvar SelectWho = /*#__PURE__*/function (_Component) {\n  _inherits(SelectWho, _Component);\n\n  function SelectWho(props) {\n    var _this;\n\n    _classCallCheck(this, SelectWho);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectWho).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggle\", function (userid) {\n      return function () {\n        var currentIndex = _this.state.currentSelectedUsers.indexOf(userid);\n\n        var newChecked = _toConsumableArray(_this.state.currentSelectedUsers);\n\n        console.log('inside HANDLETOGGLE');\n        console.log(currentIndex);\n        console.log(newChecked);\n        console.log('what is this.state?');\n        console.log(_this.state);\n\n        if (currentIndex === -1) {\n          newChecked.push(userid);\n        } else {\n          newChecked.splice(currentIndex, 1);\n        }\n\n        _this.setState({\n          currentSelectedUsers: newChecked\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUserList\", function () {\n      var self = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _assertThisInitialized(_this);\n      console.log('now inside getUserList function.');\n      var db = firebase.firestore(); // firestore のオブジェクト取得\n\n      db.collection('news-user').get().then(function (querySnapshot) {\n        var userList = [];\n        querySnapshot.forEach(function (doc) {\n          // doc.data() is never undefined for query doc snapshots\n          console.log(doc.id, \" => \", doc.data());\n          userList.push(doc.id);\n        });\n        self.setState({\n          userList: userList\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeText\", function (e) {\n      _this.setState({\n        textAreaValue: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"doAction\", function (article, userid, e) {\n      console.log('doActionの中');\n      console.log('userid is');\n      console.log(userid);\n      var db = firebase.firestore();\n      var date = firebase.firestore.Timestamp.fromDate(new Date()); // Firestore の登録処理\n\n      if (_this.state.currentSelectedUsers.length === 0 || _this.state.currentSelectedUsers === null || _this.state.currentSelectedUsers === undefined) {\n        _this.setState({\n          message: '共有する相手を1人以上選択してください'\n        });\n\n        return null;\n      }\n\n      db.collection('share').add({\n        title: article.title,\n        description: article.description,\n        image: article.urlToImage,\n        url: article.url,\n        sharedFrom: userid,\n        sharedTo: _this.state.currentSelectedUsers,\n        comment: _defineProperty({}, date.seconds + userid, {\n          speaker: userid,\n          text: _this.state.textAreaValue,\n          date: date\n        })\n      }).then(function (doc) {\n        console.log(\"\\u5171\\u6709\\u3057\\u307E\\u3057\\u305F\");\n\n        _this.setState({\n          message: '共有しました！続けて別の人やグループに共有することもできます。',\n          textAreaValue: '',\n          currentSelectedUsers: []\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            message: null\n          });\n        }, 2000);\n      })[\"catch\"](function (error) {\n        console.log(\"\\u5171\\u6709\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\\u3002\\u30EA\\u30C8\\u30E9\\u30A4\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n\n        _this.setState({\n          message: '共有に失敗しました。リトライしてください。',\n          textAreaValue: '',\n          currentSelectedUsers: []\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n\n      _this.setState({\n        title: '',\n        description: '',\n        image: '',\n        url: '',\n        sharedFrom: '',\n        sharedTo: '',\n        comment: ''\n      });\n    });\n\n    if (_this.props.login == false) {\n      Router.push('/');\n    }\n\n    _this.state = {\n      userList: [],\n      textAreaValue: '',\n      message: null,\n      currentSelectedUsers: []\n    };\n    _this.logined = _this.logined.bind(_assertThisInitialized(_this)); //this.onChecked = this.onChecked.bind(this);\n\n    _this.doAction = _this.doAction.bind(_assertThisInitialized(_this));\n    _this.onChangeText = _this.onChangeText.bind(_assertThisInitialized(_this));\n    _this.handleToggle = _this.handleToggle.bind(_assertThisInitialized(_this));\n    return _this;\n  } // login, logout 処理\n\n\n  _createClass(SelectWho, [{\n    key: \"logined\",\n    value: function logined() {\n      console.log('logined.');\n    }\n  }, {\n    key: \"logouted\",\n    value: function logouted() {\n      Router.push('/');\n    }\n    /*　自前で書いたけど、handleToggleで代用できるから不要になった。\n    onChecked(userid, e) {\n        const currentSelectedUsers = this.state.currentSelectedUsers ? this.state.currentSelectedUsers : [];\n        currentSelectedUsers.push(userid)\n        // はまりポイント：\n        // 以下で {currentSelectedUsers : currentSelectedUsers.push(userid)}としたら\n        // currentSelectedUsers に 1 という数字が入って配列じゃないためpushできないという現象\n        // Array.push は 戻り値として length を返すため\n        e.target.checked ? \n        this.setState({currentSelectedUsers : currentSelectedUsers})\n        :\n        this.setState({currentSelectedUsers : currentSelectedUsers.filter(elem => elem !== userid)})\n    }\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var article = this.props.article;\n      var userid = this.props.userid;\n      (this.state.userList.length === 0 || this.state.userList === undefined) && this.getUserList();\n      var dispList = [];\n      this.state.userList.map(function (userid) {\n        return dispList.push(__jsx(ListItem, {\n          key: userid,\n          role: undefined,\n          dense: true,\n          button: true,\n          onClick: _this2.handleToggle(userid)\n        }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n          edge: \"start\",\n          tabIndex: -1,\n          checked: _this2.state.currentSelectedUsers.indexOf(userid) !== -1,\n          disableRipple: true,\n          inputProps: {\n            'aria-labelledby': userid\n          }\n        })), __jsx(ListItemText, {\n          id: userid,\n          primary: userid\n        })));\n      });\n      return __jsx(\"div\", null, __jsx(Typography, {\n        variant: \"body1\",\n        gutterBottom: true\n      }, \"\\u8AB0\\u306B\\u5171\\u6709\\u3057\\u307E\\u3059\\u304B\\uFF1F\"), __jsx(List, null, dispList), __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(AccountCircle, null)), __jsx(Grid, {\n        item: true\n      }, __jsx(TextField, {\n        id: \"outlined-multiline-flexible\",\n        label: \"Comment\",\n        placeholder: \"\\u30B3\\u30E1\\u30F3\\u30C8\\u3092\\u5165\\u529B\\uFF08\\u4EFB\\u610F\\uFF09\",\n        multiline: true,\n        rowsMax: \"5\",\n        size: \"medium\",\n        value: this.state.textAreaValue,\n        onChange: this.onChangeText,\n        variant: \"outlined\"\n      })), __jsx(Grid, {\n        item: true\n      }, __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.doAction(article, userid, e);\n        }\n      }, \"\\u78BA\\u5B9A\"))), __jsx(\"p\", null, this.state.message));\n    }\n  }]);\n\n  return SelectWho;\n}(Component);\n\nSelectWho = connect(function (state) {\n  return state;\n})(SelectWho);\nexport default SelectWho;","map":null,"metadata":{},"sourceType":"module"}