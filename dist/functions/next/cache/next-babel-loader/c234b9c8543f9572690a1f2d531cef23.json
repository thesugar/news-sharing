{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nclass AddComment extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeText\", e => {\n      this.setState({\n        textAreaValue: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"doAction\", (shareId, userid, e) => {\n      let db = firebase.firestore();\n      const date = firebase.firestore.Timestamp.fromDate(new Date()); // Firestore の登録処理\n\n      db.collection('share').doc(shareId).set({\n        comment: {\n          // 同時に複数ユーザーからコメントがあっても上書きされないように\n          // key はタイムスタンプ（1970-01-01 0時からの経過秒数）+ userid にしている\n          // 別案：date.nanoseconds を使えば + userid としなくてもかぶることは基本的にないだろうとは思われる\n          [date.seconds + userid]: {\n            speaker: userid,\n            text: this.state.textAreaValue,\n            date: date\n          }\n        }\n      }, {\n        merge: true\n      }).then(doc => {\n        console.log(`コメントを追加しました`);\n        this.setState({\n          message: '返信しました！続けて別の人やグループに共有することもできます。',\n          textAreaValue: ''\n        });\n        setTimeout(() => {\n          this.setState({\n            message: null\n          });\n        }, 2000);\n      }).catch(error => {\n        console.log(`返信に失敗しました。リトライしてください。`);\n        this.setState({\n          message: '共有に失敗しました。リトライしてください。',\n          textAreaValue: ''\n        });\n        setTimeout(() => {\n          this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n    });\n\n    _defineProperty(this, \"sync\", shareId => {\n      let db = firebase.firestore();\n      db.collection(\"share\").doc(shareId).onSnapshot(doc => {\n        console.log('inside sync func!');\n        console.log(doc.data());\n        let commentRef = doc.data()['comment'];\n        const commentList = [];\n        Object.keys(commentRef).map(key => commentList.push(__jsx(\"li\", {\n          key: key\n        }, commentRef[key]['speaker'], \": \", commentRef[key]['text'], \" (\", new Date(commentRef[key]['date'].seconds * 1000).toLocaleString(), \")\")));\n        this.setState({\n          commentList: commentList\n        });\n      });\n    });\n\n    if (this.props.login == false) {\n      Router.push('/');\n    }\n\n    this.state = {\n      textAreaValue: '',\n      message: null\n    };\n    this.logined = this.logined.bind(this);\n    this.doAction = this.doAction.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n    this.sync(this.props.shareId);\n  } // login, logout 処理\n\n\n  logined() {\n    console.log('logined.');\n  }\n\n  logouted() {\n    Router.push('/');\n  }\n\n  render() {\n    const shareId = this.props.shareId;\n    const userid = this.props.userid;\n    return __jsx(\"div\", null, this.state.commentList, __jsx(\"br\", null), __jsx(\"div\", null, __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      alignItems: \"center\"\n    }, __jsx(Grid, {\n      item: true\n    }, __jsx(AccountCircle, null)), __jsx(Grid, {\n      item: true\n    }, __jsx(TextField, {\n      id: \"outlined-multiline-flexible\",\n      label: \"Reply\",\n      placeholder: \"\\u8FD4\\u4FE1\\u3059\\u308B\",\n      multiline: true,\n      rowsMax: \"5\",\n      size: \"medium\",\n      value: this.state.textAreaValue,\n      onChange: this.onChangeText,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: e => this.doAction(shareId, userid, e)\n    }, \"\\u8FD4\\u4FE1\")))), __jsx(\"p\", null, this.state.message));\n  }\n\n}\n\nAddComment = connect(state => state)(AddComment);\nexport default AddComment;","map":null,"metadata":{},"sourceType":"module"}