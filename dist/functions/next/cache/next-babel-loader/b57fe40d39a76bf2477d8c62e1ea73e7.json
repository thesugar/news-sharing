{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nvar Register = /*#__PURE__*/function (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeText\", function (e) {\n      _this.setState({\n        textAreaValue: e.target.value\n      });\n\n      _this.checkId(e.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"doAction\", function (userid, e) {\n      var db = firebase.firestore(); // Firestore の登録処理\n\n      db.collection('news-user').doc(userid).set({\n        userid: userid,\n        email: firebase.auth().currentUser.email\n      }).then(function (doc) {\n        _this.setState({\n          message: 'ID登録が完了しました',\n          textAreaValue: ''\n        });\n\n        _this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            userid: userid,\n            email: firebase.auth().currentUser.email,\n            articles: _this.props.articles,\n            itemList: _this.props.itemList\n          }\n        });\n\n        setTimeout(function () {\n          Router.push('/');\n        }, 2000);\n      })[\"catch\"](function (error) {\n        console.log(\"\\u767B\\u9332\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\\u3002\\u30EA\\u30C8\\u30E9\\u30A4\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n\n        _this.setState({\n          message: 'ID登録に失敗しました。リトライしてください。',\n          textAreaValue: ''\n        });\n\n        setTimeout(function () {\n          _this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkId\", function (userId) {\n      console.log('I am in the checkId');\n      console.log('userId is');\n      console.log(userId);\n\n      if (userId === '' || userId === undefined || userId === null) {\n        return null;\n      }\n\n      var db = firebase.firestore(); // 入力のたびに Firestore に照会行くのやばい？\n      // 一回だけユーザーリスト取得しきって，あとはアプリ内でチェックすると DBアクセス的には優しい\n      // でも上記のやり方だと，規模が大きくなったら，そうしてる間にIDの衝突が発生しそう．\n\n      db.collection(\"news-user\").where(\"userid\", \"==\", userId).get().then(function (querySnapshot) {\n        if (querySnapshot.docs[0].id === undefined) {\n          _this.setState({\n            message: userId + 'はユーザーIDとして登録できます。',\n            ok: true\n          });\n        } else {\n          _this.setState({\n            message: userId + 'はすでに存在します。',\n            ok: false\n          });\n        }\n      })[\"catch\"](function (error) {\n        console.log(error);\n\n        _this.setState({\n          message: userId + 'はユーザーIDとして登録できます。',\n          ok: true\n        });\n      });\n    });\n\n    _this.state = {\n      textAreaValue: '',\n      message: null,\n      ok: false\n    };\n    _this.doAction = _this.doAction.bind(_assertThisInitialized(_this));\n    _this.onChangeText = _this.onChangeText.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", null, __jsx(Typography, {\n        variant: \"body1\",\n        gutterBottom: true\n      }, \"\\u30E6\\u30FC\\u30B6\\u30FC\\u767B\\u9332\"), __jsx(Grid, {\n        container: true,\n        spacing: 3,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\uFF1A\"), __jsx(Grid, {\n        item: true\n      }, firebase.auth().currentUser.email)), __jsx(\"br\", null), __jsx(Typography, {\n        variant: \"body1\",\n        color: \"primary\",\n        gutterBottom: true\n      }, \"\\u3053\\u306E\\u30A2\\u30D7\\u30EA\\u3067\\u4F7F\\u3046ID\\u3092\\u767B\\u9332\\u3057\\u3088\\u3046\\uFF01\"), __jsx(\"br\", null), __jsx(Grid, {\n        container: true,\n        spacing: 8,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(\"form\", {\n        className: \"id-box\",\n        noValidate: true,\n        autoComplete: \"off\"\n      }, __jsx(TextField, {\n        id: \"filled-basic\",\n        label: \"ID\",\n        variant: \"filled\",\n        size: \"small\",\n        value: this.state.textAreaValue,\n        onChange: this.onChangeText\n      }))), __jsx(Grid, {\n        item: true\n      }, this.state.ok ? __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.doAction(_this2.state.textAreaValue, e);\n        }\n      }, \"\\u767B\\u9332\") : __jsx(Button, {\n        variant: \"contained\",\n        disabled: true\n      }, \"\\u767B\\u9332\"))), __jsx(Typography, {\n        variant: \"body1\",\n        color: this.state.ok ? \"textPrimary\" : \"error\",\n        gutterBottom: true\n      }, this.state.message));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nRegister = connect(function (state) {\n  return state;\n})(Register);\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}