{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\nimport Router from \"next/router\";\n\nclass Account extends Component {\n  constructor(props) {\n    console.log('Account.jsのconstructor');\n    super(props);\n\n    _defineProperty(this, \"match_user\", result => {\n      let db = firebase.firestore(); // メールアドレスをもとに、マッチするユーザーを探してユーザーIDを取得\n      // 下のブロックの中でもresult.userは生きてるので他の認証情報とかを取ってくることもできる\n\n      db.collection(\"news-user\").where('email', '==', result.user.email).get().then(querySnapshot => {\n        // success\n        console.log(querySnapshot.docs[0].data());\n        this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            userid: querySnapshot.docs[0].data().userid,\n            articles: this.props.articles,\n            itemList: this.props.itemList\n          }\n        });\n      }).catch(error => {\n        console.log(error);\n        Router.push('/register');\n      });\n    });\n\n    this.login_check = this.login_check.bind(this);\n    this.match_user = this.match_user.bind(this);\n  }\n\n  login() {\n    console.log('Account.jsのlogin()');\n    let provider = new firebase.auth.GoogleAuthProvider();\n    let self = this;\n    let db = firebase.firestore();\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    firebase.auth().signInWithPopup(provider).then(result => {\n      this.match_user(result); //ログイン後に処理を行う場合，以下コメントアウトを解除（onLogined()を呼び出し元でちゃんと定義したうえで）\n      //this.props.onLogined();\n    });\n  }\n\n  logout() {\n    console.log(\"logout\");\n    firebase.auth().signOut();\n    this.props.dispatch({\n      type: 'UPDATE_USER',\n      value: {\n        login: false,\n        userid: 'annonymous',\n        email: '',\n        articles: this.props.articles,\n        itemList: this.props.itemList\n      }\n    }); //ログアウト後に処理を行いたい場合（トップページに戻るなど），以下コメントアウトを解除(onLogouted()を呼び出し元で定義したうえで)\n    //this.props.onLogouted();\n  } // check if user is logged in or logged out\n\n\n  login_check() {\n    console.log('Account.jsのlogin_check()');\n\n    if (this.props.login === undefined || this.props.login == false) {\n      this.login();\n    } else {\n      this.logout();\n    }\n  }\n\n  render() {\n    return __jsx(\"span\", {\n      className: \"acount\",\n      onClick: this.login_check\n    }, this.props.userid === 'annonymous' || this.props.userid === undefined || this.props.userid === null ? \"login / sign up\" : this.props.userid + \" / logout\");\n  }\n\n}\n\nAccount = connect(state => state)(Account);\nexport default Account;","map":null,"metadata":{},"sourceType":"module"}