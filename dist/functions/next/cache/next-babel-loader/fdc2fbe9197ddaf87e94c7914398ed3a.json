{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport Typography from '@material-ui/core/Typography';\n\nclass SelectWho extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleToggle\", userid => () => {\n      const currentIndex = this.state.currentSelectedUsers.indexOf(userid);\n      const newChecked = [...this.state.currentSelectedUsers];\n      console.log('inside HANDLETOGGLE');\n      console.log(currentIndex);\n      console.log(newChecked);\n      console.log('what is this.state?');\n      console.log(this.state);\n\n      if (currentIndex === -1) {\n        newChecked.push(userid);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      this.setState({\n        currentSelectedUsers: newChecked\n      });\n    });\n\n    _defineProperty(this, \"getUserList\", (self = this) => {\n      console.log('now inside getUserList function.');\n      let db = firebase.firestore(); // firestore のオブジェクト取得\n\n      db.collection('news-user').get().then(function (querySnapshot) {\n        let userList = [];\n        querySnapshot.forEach(doc => {\n          // doc.data() is never undefined for query doc snapshots\n          console.log(doc.id, \" => \", doc.data());\n          userList.push(doc.id);\n        });\n        self.setState({\n          userList: userList\n        });\n      });\n    });\n\n    _defineProperty(this, \"onChangeText\", e => {\n      this.setState({\n        textAreaValue: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"doAction\", (article, userid, e) => {\n      console.log('doActionの中');\n      console.log('userid is');\n      console.log(userid);\n      let db = firebase.firestore();\n      const date = firebase.firestore.Timestamp.fromDate(new Date()); // Firestore の登録処理\n\n      if (this.state.currentSelectedUsers.length === 0 || this.state.currentSelectedUsers === null || this.state.currentSelectedUsers === undefined) {\n        this.setState({\n          message: '共有する相手を1人以上選択してください'\n        });\n        return null;\n      }\n\n      db.collection('share').add({\n        title: article.title,\n        description: article.description,\n        image: article.urlToImage,\n        url: article.url,\n        sharedFrom: userid,\n        sharedTo: this.state.currentSelectedUsers,\n        comment: {\n          // 同時に複数ユーザーからコメントがあっても上書きされないように\n          // key はタイムスタンプ（1970-01-01 0時からの経過秒数）+ userid にしている\n          // 別案：date.nanoseconds を使えば + userid としなくてもかぶることは基本的にないだろうとは思われる\n          [date.seconds + userid]: {\n            speaker: userid,\n            text: this.state.textAreaValue,\n            date: date\n          }\n        }\n      }).then(doc => {\n        console.log(`共有しました`);\n        this.setState({\n          message: '共有しました！続けて別の人やグループに共有することもできます。',\n          textAreaValue: '',\n          currentSelectedUsers: []\n        });\n        setTimeout(() => {\n          this.setState({\n            message: null\n          });\n        }, 2000);\n      }).catch(error => {\n        console.log(`共有に失敗しました。リトライしてください。`);\n        this.setState({\n          message: '共有に失敗しました。リトライしてください。',\n          textAreaValue: '',\n          currentSelectedUsers: []\n        });\n        setTimeout(() => {\n          this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n      this.setState({\n        title: '',\n        description: '',\n        image: '',\n        url: '',\n        sharedFrom: '',\n        sharedTo: '',\n        comment: ''\n      });\n    });\n\n    if (this.props.login == false) {\n      Router.push('/');\n    }\n\n    this.state = {\n      userList: [],\n      textAreaValue: '',\n      message: null,\n      currentSelectedUsers: []\n    };\n    this.logined = this.logined.bind(this); //this.onChecked = this.onChecked.bind(this);\n\n    this.doAction = this.doAction.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  } // login, logout 処理\n\n\n  logined() {\n    console.log('logined.');\n  }\n\n  logouted() {\n    Router.push('/');\n  }\n  /*　自前で書いたけど、handleToggleで代用できるから不要になった。\n  onChecked(userid, e) {\n      const currentSelectedUsers = this.state.currentSelectedUsers ? this.state.currentSelectedUsers : [];\n      currentSelectedUsers.push(userid)\n      // はまりポイント：\n      // 以下で {currentSelectedUsers : currentSelectedUsers.push(userid)}としたら\n      // currentSelectedUsers に 1 という数字が入って配列じゃないためpushできないという現象\n      // Array.push は 戻り値として length を返すため\n      e.target.checked ? \n      this.setState({currentSelectedUsers : currentSelectedUsers})\n      :\n      this.setState({currentSelectedUsers : currentSelectedUsers.filter(elem => elem !== userid)})\n  }\n  */\n\n\n  render() {\n    const article = this.props.article;\n    const userid = this.props.userid;\n    (this.state.userList.length === 0 || this.state.userList === undefined) && this.getUserList();\n    let dispList = [];\n    this.state.userList.map(userid => dispList.push(__jsx(ListItem, {\n      key: userid,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: this.handleToggle(userid)\n    }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n      edge: \"start\",\n      tabIndex: -1,\n      checked: this.state.currentSelectedUsers.indexOf(userid) !== -1,\n      disableRipple: true,\n      inputProps: {\n        'aria-labelledby': userid\n      }\n    })), __jsx(ListItemText, {\n      id: userid,\n      primary: userid\n    }))));\n    return __jsx(\"div\", null, __jsx(Typography, {\n      variant: \"body1\",\n      gutterBottom: true\n    }, \"\\u8AB0\\u306B\\u5171\\u6709\\u3057\\u307E\\u3059\\u304B\\uFF1F\"), __jsx(List, null, dispList), __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      alignItems: \"center\"\n    }, __jsx(Grid, {\n      item: true\n    }, __jsx(AccountCircle, null)), __jsx(Grid, {\n      item: true\n    }, __jsx(TextField, {\n      id: \"outlined-multiline-flexible\",\n      label: \"Comment\",\n      placeholder: \"\\u30B3\\u30E1\\u30F3\\u30C8\\u3092\\u5165\\u529B\\uFF08\\u4EFB\\u610F\\uFF09\",\n      multiline: true,\n      rowsMax: \"5\",\n      size: \"medium\",\n      value: this.state.textAreaValue,\n      onChange: this.onChangeText,\n      variant: \"outlined\"\n    })), __jsx(Grid, {\n      item: true\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: e => this.doAction(article, userid, e)\n    }, \"\\u78BA\\u5B9A\"))), __jsx(\"p\", null, this.state.message));\n  }\n\n}\n\nSelectWho = connect(state => state)(SelectWho);\nexport default SelectWho;","map":null,"metadata":{},"sourceType":"module"}