{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeText\", e => {\n      this.setState({\n        textAreaValue: e.target.value\n      });\n      this.checkId(e.target.value);\n    });\n\n    _defineProperty(this, \"doAction\", (userid, e) => {\n      let db = firebase.firestore(); // Firestore の登録処理\n\n      db.collection('news-user').doc(userid).set({\n        userid: userid,\n        email: firebase.auth().currentUser.email\n      }).then(doc => {\n        this.setState({\n          message: 'ID登録が完了しました',\n          textAreaValue: ''\n        });\n        this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            userid: userid,\n            email: firebase.auth().currentUser.email,\n            articles: this.props.articles,\n            itemList: this.props.itemList\n          }\n        });\n        setTimeout(() => {\n          Router.push('/');\n        }, 2000);\n      }).catch(error => {\n        console.log(`登録に失敗しました。リトライしてください。`);\n        this.setState({\n          message: 'ID登録に失敗しました。リトライしてください。',\n          textAreaValue: ''\n        });\n        setTimeout(() => {\n          this.setState({\n            message: null\n          });\n        }, 2000);\n      });\n    });\n\n    _defineProperty(this, \"checkId\", userId => {\n      console.log('I am in the checkId');\n      console.log('userId is');\n      console.log(userId);\n\n      if (userId === '' || userId === undefined || userId === null) {\n        return null;\n      }\n\n      let db = firebase.firestore(); // 入力のたびに Firestore に照会行くのやばい？\n      // 一回だけユーザーリスト取得しきって，あとはアプリ内でチェックすると DBアクセス的には優しい\n      // でも上記のやり方だと，規模が大きくなったら，そうしてる間にIDの衝突が発生しそう．\n\n      db.collection(\"news-user\").where(\"userid\", \"==\", userId).get().then(querySnapshot => {\n        if (querySnapshot.docs[0].id === undefined) {\n          this.setState({\n            message: userId + 'はユーザーIDとして登録できます。',\n            ok: true\n          });\n        } else {\n          this.setState({\n            message: userId + 'はすでに存在します。',\n            ok: false\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          message: userId + 'はユーザーIDとして登録できます。',\n          ok: true\n        });\n      });\n    });\n\n    this.state = {\n      textAreaValue: '',\n      message: null,\n      ok: false\n    };\n    this.doAction = this.doAction.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Typography, {\n      variant: \"body1\",\n      gutterBottom: true\n    }, \"\\u30E6\\u30FC\\u30B6\\u30FC\\u767B\\u9332\"), __jsx(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"center\"\n    }, __jsx(Grid, {\n      item: true\n    }, \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\uFF1A\"), __jsx(Grid, {\n      item: true\n    }, firebase.auth().currentUser.email)), __jsx(\"br\", null), __jsx(Typography, {\n      variant: \"body1\",\n      color: \"primary\",\n      gutterBottom: true\n    }, \"\\u3053\\u306E\\u30A2\\u30D7\\u30EA\\u3067\\u4F7F\\u3046ID\\u3092\\u767B\\u9332\\u3057\\u3088\\u3046\\uFF01\"), __jsx(\"br\", null), __jsx(Grid, {\n      container: true,\n      spacing: 8,\n      alignItems: \"center\"\n    }, __jsx(Grid, {\n      item: true\n    }, __jsx(\"form\", {\n      className: \"id-box\",\n      noValidate: true,\n      autoComplete: \"off\"\n    }, __jsx(TextField, {\n      id: \"filled-basic\",\n      label: \"ID\",\n      variant: \"filled\",\n      size: \"small\",\n      value: this.state.textAreaValue,\n      onChange: this.onChangeText\n    }))), __jsx(Grid, {\n      item: true\n    }, this.state.ok ? __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: e => this.doAction(this.state.textAreaValue, e)\n    }, \"\\u767B\\u9332\") : __jsx(Button, {\n      variant: \"contained\",\n      disabled: true\n    }, \"\\u767B\\u9332\"))), __jsx(Typography, {\n      variant: \"body1\",\n      color: this.state.ok ? \"textPrimary\" : \"error\",\n      gutterBottom: true\n    }, this.state.message));\n  }\n\n}\n\nRegister = connect(state => state)(Register);\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}