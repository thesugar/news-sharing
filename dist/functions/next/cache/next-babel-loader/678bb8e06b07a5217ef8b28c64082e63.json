{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport NewsCard from '../components/NewsCard';\nimport Account from '../components/Account';\nimport firebase from \"firebase\";\n/*\n MEMO: db.collection('share').where(<ShareTo に userid（要マッチング処理） が含まれる>) で，共有されたニュースを read する．\n    あるいは，Shareするとき，別途 user から辿れるコレクションを作る仕組みにしてもいい．\n    ShareFrom で，自分が share したやつも read して，共有相手の反応などを確認できるようにする．（これはコンポーネントを分けてもいい）\n*/\n\nclass SharedNewsList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getNewsSharedByFriends\", () => {\n      let db = firebase.firestore();\n      db.collection('share').where('sharedTo', 'array-contains', this.props.userid).get().then(querySnapshot => {\n        // success\n        let sharedObject = {};\n        querySnapshot.forEach(doc => {\n          // はまりポイント: ここでObejct.assign({}, JSON...)とやらないと，reduxがstateの変更を検知してくれない．\n          // 参考：https://redux.js.org/faq/immutable-data/\n          sharedObject = Object.assign({}, JSON.parse(JSON.stringify(sharedObject)), {\n            [doc.id]: JSON.parse(JSON.stringify(doc.data()))\n          });\n          this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n              login: true,\n              userid: this.props.userid,\n              articles: this.props.articles,\n              itemList: this.props.itemList,\n              articlesSharedByFriends: sharedObject\n            }\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    _defineProperty(this, \"makeTitleList\", sharedNews => {\n      let sharedNewsForDisp = [];\n      Object.keys(sharedNews).map(key => {\n        // コメントが新しい順に並び替えて表示するために、引数で受け取ったニュースのリスト（これはFirestoreから引っ張ってきた順番で、\n        // ソートはされていない）をもとに新しいオブジェクトを作っている。\n        // その新しいオブジェクトの中でdateという項目を持たせて、後続で並び替え処理を行っている。\n        // まったくもってスマートじゃない気がするので、修正したほうがよいかも。\n        // もともとのFirestor側のデータで、latestUpdate みたいなキーを持たせて、新規共有やコメント追加があるたびそこを書き換えて\n        // そこを見てorderBy（Firestore純正の機能）すれば一発なのではないか\n        // もしくは、コメント追加時にコメントをObjのObjにしてるけど、arrayUnion（Firestoreの機能）を使ってオブジェクトの配列にすればもうちょい楽かも\n        // （今回の実装も、結局ObjのObjを以下sharedNewsForDisp.push()で配列に直してるわけだし。。。）\n        sharedNewsForDisp.push({\n          key: key,\n          date: Number(String(Object.keys(sharedNews[key].comment)[Object.keys(sharedNews[key].comment).length - 1]).slice(0, 10)),\n          sharedFrom: sharedNews[key]['sharedFrom'],\n          title: sharedNews[key]['title']\n        });\n      });\n      sharedNewsForDisp.sort((a, b) => {\n        if (a.date < b.date) return 1;\n        if (a.date > b.date) return -1;\n        return 0;\n      });\n      const msg = [];\n      sharedNewsForDisp.map(news => msg.push(__jsx(\"li\", {\n        key: news.key\n      }, news['sharedFrom'], \"\\u3055\\u3093\\u304B\\u3089\", __jsx(Link, {\n        href: \"/share/[shareid]\",\n        as: `/share/${news.key}`\n      }, news['title'].split(' - ')[0]), \"\\u304C\\u30B7\\u30A7\\u30A2\\u3055\\u308C\\u307E\\u3057\\u305F\\uFF01\")));\n      return msg;\n    });\n\n    this.logined = this.logined.bind(this);\n  } // get data from Firebase\n\n\n  logined() {\n    console.log('loginしました'); //this.getFireData();\n  }\n\n  logouted() {\n    console.log('logoutしました');\n  }\n\n  render() {\n    console.log('SharedNewsListのrender()');\n    console.log('今のthis.propsは');\n    console.log(this.props);\n    (this.props.articlesSharedByFriends === undefined || this.props.articlesSharedByFriends.length === 0) && this.getNewsSharedByFriends();\n    let sharedNews = this.props.articlesSharedByFriends;\n    let msg = [];\n\n    if (sharedNews) {\n      msg = this.makeTitleList(sharedNews);\n    }\n\n    return __jsx(\"div\", null, __jsx(\"ul\", null, sharedNews ? msg : null));\n  }\n\n}\n\nSharedNewsList = connect(state => state)(SharedNewsList);\nexport default SharedNewsList;","map":null,"metadata":{},"sourceType":"module"}