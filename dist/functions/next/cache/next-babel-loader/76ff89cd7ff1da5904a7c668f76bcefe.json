{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\nimport Router from \"next/router\";\n\nvar Account = /*#__PURE__*/function (_Component) {\n  _inherits(Account, _Component);\n\n  function Account(props) {\n    var _this;\n\n    _classCallCheck(this, Account);\n\n    console.log('Account.jsのconstructor');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Account).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"match_user\", function (result) {\n      var db = firebase.firestore(); // メールアドレスをもとに、マッチするユーザーを探してユーザーIDを取得\n      // 下のブロックの中でもresult.userは生きてるので他の認証情報とかを取ってくることもできる\n\n      db.collection(\"news-user\").where('email', '==', result.user.email).get().then(function (querySnapshot) {\n        // success\n        console.log(querySnapshot.docs[0].data());\n\n        _this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: true,\n            userid: querySnapshot.docs[0].data().userid,\n            articles: _this.props.articles,\n            itemList: _this.props.itemList\n          }\n        });\n      })[\"catch\"](function (error) {\n        console.log(error);\n        Router.push('/register');\n      });\n    });\n\n    _this.login_check = _this.login_check.bind(_assertThisInitialized(_this));\n    _this.match_user = _this.match_user.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Account, [{\n    key: \"login\",\n    value: function login() {\n      var _this2 = this;\n\n      console.log('Account.jsのlogin()');\n      var provider = new firebase.auth.GoogleAuthProvider();\n      var self = this;\n      var db = firebase.firestore();\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        _this2.match_user(result); //ログイン後に処理を行う場合，以下コメントアウトを解除（onLogined()を呼び出し元でちゃんと定義したうえで）\n        //this.props.onLogined();\n\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      console.log(\"logout\");\n      firebase.auth().signOut();\n      this.props.dispatch({\n        type: 'UPDATE_USER',\n        value: {\n          login: false,\n          userid: 'annonymous',\n          email: '',\n          articles: this.props.articles,\n          itemList: this.props.itemList\n        }\n      }); //ログアウト後に処理を行いたい場合（トップページに戻るなど），以下コメントアウトを解除(onLogouted()を呼び出し元で定義したうえで)\n      //this.props.onLogouted();\n    } // check if user is logged in or logged out\n\n  }, {\n    key: \"login_check\",\n    value: function login_check() {\n      console.log('Account.jsのlogin_check()');\n\n      if (this.props.login === undefined || this.props.login == false) {\n        this.login();\n      } else {\n        this.logout();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"span\", {\n        className: \"acount\",\n        onClick: this.login_check\n      }, this.props.userid === 'annonymous' || this.props.userid === undefined || this.props.userid === null ? \"login / sign up\" : this.props.userid + \" / logout\");\n    }\n  }]);\n\n  return Account;\n}(Component);\n\nAccount = connect(function (state) {\n  return state;\n})(Account);\nexport default Account;","map":null,"metadata":{},"sourceType":"module"}