{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport NewsCard from '../components/NewsCard';\nimport Account from '../components/Account';\nimport firebase from \"firebase\";\n/*\n MEMO: db.collection('share').where(<ShareTo に userid（要マッチング処理） が含まれる>) で，共有されたニュースを read する．\n    あるいは，Shareするとき，別途 user から辿れるコレクションを作る仕組みにしてもいい．\n    ShareFrom で，自分が share したやつも read して，共有相手の反応などを確認できるようにする．（これはコンポーネントを分けてもいい）\n*/\n\nvar SharedNewsList = /*#__PURE__*/function (_Component) {\n  _inherits(SharedNewsList, _Component);\n\n  function SharedNewsList(props) {\n    var _this;\n\n    _classCallCheck(this, SharedNewsList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SharedNewsList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getNewsSharedByFriends\", function () {\n      var db = firebase.firestore();\n      db.collection('share').where('sharedTo', 'array-contains', _this.props.userid).get().then(function (querySnapshot) {\n        // success\n        var sharedObject = {};\n        querySnapshot.forEach(function (doc) {\n          // はまりポイント: ここでObejct.assign({}, JSON...)とやらないと，reduxがstateの変更を検知してくれない．\n          // 参考：https://redux.js.org/faq/immutable-data/\n          sharedObject = _Object$assign({}, JSON.parse(_JSON$stringify(sharedObject)), _defineProperty({}, doc.id, JSON.parse(_JSON$stringify(doc.data()))));\n\n          _this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n              login: true,\n              userid: _this.props.userid,\n              articles: _this.props.articles,\n              itemList: _this.props.itemList,\n              articlesSharedByFriends: sharedObject\n            }\n          });\n        });\n      })[\"catch\"](function (error) {\n        console.log(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeTitleList\", function (sharedNews) {\n      var sharedNewsForDisp = [];\n\n      _Object$keys(sharedNews).map(function (key) {\n        // コメントが新しい順に並び替えて表示するために、引数で受け取ったニュースのリスト（これはFirestoreから引っ張ってきた順番で、\n        // ソートはされていない）をもとに新しいオブジェクトを作っている。\n        // その新しいオブジェクトの中でdateという項目を持たせて、後続で並び替え処理を行っている。\n        // まったくもってスマートじゃない気がするので、修正したほうがよいかも。\n        // もともとのFirestor側のデータで、latestUpdate みたいなキーを持たせて、新規共有やコメント追加があるたびそこを書き換えて\n        // そこを見てorderBy（Firestore純正の機能）すれば一発なのではないか\n        // もしくは、コメント追加時にコメントをObjのObjにしてるけど、arrayUnion（Firestoreの機能）を使ってオブジェクトの配列にすればもうちょい楽かも\n        // （今回の実装も、結局ObjのObjを以下sharedNewsForDisp.push()で配列に直してるわけだし。。。）\n        sharedNewsForDisp.push({\n          key: key,\n          date: Number(String(_Object$keys(sharedNews[key].comment)[_Object$keys(sharedNews[key].comment).length - 1]).slice(0, 10)),\n          sharedFrom: sharedNews[key]['sharedFrom'],\n          title: sharedNews[key]['title']\n        });\n      });\n\n      sharedNewsForDisp.sort(function (a, b) {\n        if (a.date < b.date) return 1;\n        if (a.date > b.date) return -1;\n        return 0;\n      });\n      var msg = [];\n      sharedNewsForDisp.map(function (news) {\n        return msg.push(__jsx(\"li\", {\n          key: news.key\n        }, news['sharedFrom'], \"\\u3055\\u3093\\u304B\\u3089\", __jsx(Link, {\n          href: \"/share/[shareid]\",\n          as: \"/share/\".concat(news.key)\n        }, news['title'].split(' - ')[0]), \"\\u304C\\u30B7\\u30A7\\u30A2\\u3055\\u308C\\u307E\\u3057\\u305F\\uFF01\"));\n      });\n      return msg;\n    });\n\n    _this.logined = _this.logined.bind(_assertThisInitialized(_this));\n    return _this;\n  } // get data from Firebase\n\n\n  _createClass(SharedNewsList, [{\n    key: \"logined\",\n    value: function logined() {\n      console.log('loginしました'); //this.getFireData();\n    }\n  }, {\n    key: \"logouted\",\n    value: function logouted() {\n      console.log('logoutしました');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('SharedNewsListのrender()');\n      console.log('今のthis.propsは');\n      console.log(this.props);\n      (this.props.articlesSharedByFriends === undefined || this.props.articlesSharedByFriends.length === 0) && this.getNewsSharedByFriends();\n      var sharedNews = this.props.articlesSharedByFriends;\n      var msg = [];\n\n      if (sharedNews) {\n        msg = this.makeTitleList(sharedNews);\n      }\n\n      return __jsx(\"div\", null, __jsx(\"ul\", null, sharedNews ? msg : null));\n    }\n  }]);\n\n  return SharedNewsList;\n}(Component);\n\nSharedNewsList = connect(function (state) {\n  return state;\n})(SharedNewsList);\nexport default SharedNewsList;","map":null,"metadata":{},"sourceType":"module"}